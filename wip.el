(defun test ()
  (interactive)
  (termef--search-concept "http://voc.finances.gouv.fr/individual/concept-INFO174"))


(defun termef--search-concept (url buf)
  (save-excursion
    (set-buffer buf)
    (goto-char (point-min))
    (let ((found (search-forward (format "rdf:about=\"%s\"" url) nil t)))
      (if found
	  ;; Subparse enclosing RDF-XML
	  (let* ((beg (or (beginning-of-line) (point)))
		 (end (or (forward-sexp) (point)))
		 (subparse (libxml-parse-xml-region beg end))
		 (res nil)
		 )
	    (dolist (ssbloc subparse res)
	      (if (and (listp ssbloc)
		       (atom (car ssbloc))
		       )
		  (cond
		   ((and (equal 'skos:prefLabel (car ssbloc))
			 (string= "fr" (cdr (assoc 'lang (cadr ssbloc)))))
		    (setq res (string-join (cddr ssbloc))))
		   )
		)
	      )
	    )
	nil)
      )
    )
  )

(defun termef-rdf (beg end)
  (interactive "r")
  (let ((parse (libxml-parse-xml-region beg end))
	(rdfbuf (current-buffer))
	)
    (with-current-buffer (get-buffer-create "*RDF*")
      (erase-buffer)
      (dolist (bloc parse)
	(if (and (listp bloc) (string= "Description" (car bloc)))
	    (let ((txt nil))
	      (dolist (ssbloc bloc)
		(if (and (listp ssbloc)
			 (atom (car ssbloc))
			 )
		    (cond
		     ((and (equal 'prefLabel (car ssbloc))
			   (string= "fr" (cdr (assoc 'lang (cadr ssbloc)))))
		      (insert (format "*** %s\nFiche : \n\n" (string-join (cddr ssbloc)))))

		     ((and (equal 'definition (car ssbloc))
			   (string= "fr" (cdr (assoc 'lang (cadr ssbloc)))))
		      (setq txt (append txt '("Définition : ") (cddr ssbloc) '("\n"))))

		     ((and (equal 'deconseilleOuFrequent (car ssbloc))
			   (string= "fr" (cdr (assoc 'lang (cadr ssbloc)))))
		      (setq txt (append txt '("Déconseillé : ") (cddr ssbloc) '("\n"))))

		     ((and (equal 'related (car ssbloc))
			   )
		      (let ((reference
			     (termef--search-concept
			      (format "%s" (cdr (assoc 'resource (cadr ssbloc))))
			      rdfbuf))
			    )
			(if reference (setq txt (append txt '("Voir aussi : ") (list reference) '("\n"))))))

		     )
		  )
		)
	      (if txt (insert (format "%s\n" (string-join txt))))
	      )
	  )
	)
      )
    )
  )
